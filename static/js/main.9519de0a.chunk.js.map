{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","handleSort","type","currentGoods","goods","visibleGoods","LENGTH","sort","a","b","length","ALPHABET","localeCompare","Error","reverse","getReorderedGoods","className","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,SAACC,GAClBJ,EAAYI,IAYRC,EA3CD,SACLC,EADK,GAGJ,IADCP,EACF,EADEA,SAAUE,EACZ,EADYA,WAERM,EAAY,YAAOD,GAEvB,OAAQP,GACN,KAAKL,EAASc,OACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UACzC,MACF,KAAKlB,EAASmB,SACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,cAAcH,MAC5C,MACF,KAAKjB,EAASI,KACZS,EAAY,YAAOD,GACnB,MACF,QAAS,MAAM,IAAIS,MAAM,qBAO3B,OAJId,GACFM,EAAaS,UAGRT,EAoBcU,CAAkBtB,EAAiB,CACtDI,WAAUE,eAGZ,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEd,KAAK,SACLc,UAAS,oCACPnB,IAAaL,EAASmB,SAAW,GAAK,YACxCM,QAAS,kBAAMhB,EAAWT,EAASmB,WAJrC,iCASA,wBACET,KAAK,SACLc,UAAS,uCACPnB,IAAaL,EAASc,OAAS,GAAK,YACtCW,QAAS,kBAAMhB,EAAWT,EAASc,SAJrC,4BASA,wBACEJ,KAAK,SACLc,UAAS,uCACPjB,EAAa,GAAK,YACpBkB,QAtCc,WACpBjB,GAAeD,IAiCX,sBASEA,GAAcF,IAAaL,EAASI,OACpC,wBACEM,KAAK,SACLc,UAAU,4BACVC,QA3CU,WAClBnB,EAAYN,EAASI,MACrBI,GAAc,IAsCR,sBAUJ,6BACGG,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCnHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9519de0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  let visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.NONE:\n      visibleGoods = [...goods];\n      break;\n    default: throw new Error('Invalid sort type');\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleSort = (type: SortType) => {\n    setSortType(type);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const currentGoods = getReorderedGoods(goodsFromServer, {\n    sortType, isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info\n          ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={() => handleSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success\n          ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={() => handleSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning\n          ${isReversed ? '' : 'is-light'}`}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {currentGoods.map(item => (\n          <li data-cy=\"Good\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}